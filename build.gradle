import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins{
    id 'java'
    id 'com.github.Zelaux.MindustryModCore' version "$modCoreVersion"
}
mindustryModCore{
    addKaptAnnotations()
//    setupSpriteGenerationTask()
//    setupAnnotationProject(project(":annotations"))
    addMindustryModCore()
    projectInfo{
        rootDirectory = rootDir
        assetsPath = "assets"
        assetsRawPath = "assets"
        rootPackage = "hpl"
        modInfoPath = "mod.hjson"
        revisionsPath = "revisions"
        classPrefix = "HPL"
    }
}
version 'v0.1A'

sourceCompatibility = 17
tasks.withType(JavaCompile).configureEach{
    sourceCompatibility = 17
    options.release = 8

    options.incremental = true
    options.encoding = 'UTF-8'
}

sourceSets.main {
    java.srcDirs = ["src"]
    resources.srcDirs = ["assets"]
}

repositories{
    mavenCentral()
    mavenLocal()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url  'https://raw.githubusercontent.com/Zelaux/Repo/master/repository' }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    sdkRoot = System.getenv("ANDROID_SDK_ROOT") ?: System.getenv("ANDROID_HOME")
}

dependencies{
    compileOnly arcModule("arc-core")
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly("org.jetbrains:annotations:24.0.1")

    implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
    compileOnly modCoreModule("annotations")
    kapt modCoreModule("annotations")
    annotationProcessor "com.github.GlennFolker.EntityAnno:downgrader:$entVersion"
}

/*entityAnno{
    modName = 'omaloon'
    mindustryVersion = project['mindustryVersion']
    revisionDir = file("$rootDir/revisions/")
    fetchPackage = 'omaloon.fetched'
    genSrcPackage = 'omaloon.entities.comp'
    genPackage = 'omaloon.gen.entities'
}*/

task jarAndroid{
    dependsOn "jar"
    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from(rootDir){
        include "mod.hjson"
        include "icon.png"
    }

    from("assets/"){
        include "**"
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"
    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }
    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}